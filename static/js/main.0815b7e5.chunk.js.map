{"version":3,"sources":["store/index.ts","api/api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["LOAD_TODOS","LOAD_USER","DELETE_TODO","setTodos","state","todos","setUser","user","initialState","store","createStore","action","type","payload","filter","todo","id","API_URL","request","url","postfix","a","fetch","response","json","TodoList","selectUser","useState","query","setQuery","statusOfTodo","setStatusOfTodo","preparedTodos","todosFilteredByTitle","title","toLowerCase","includes","completed","preparingTodos","dispatch","useDispatch","delTodo","className","value","onChange","event","target","map","userId","classnames","readOnly","onClick","CurrentUser","useSelector","getUserFromSever","userFromServer","useEffect","name","email","phone","App","getTodosFromServer","todosFromServer","selectedUserId","setSelectedUserId","Root","ReactDOM","render","document","getElementById"],"mappings":"qQAEMA,EAAa,aACbC,EAAY,YACZC,EAAc,cAMPC,EAAW,SAACC,GAAD,OAAsBA,EAAMC,OACvCC,EAAU,SAACF,GAAD,OAAsBA,EAAMG,MAQ7CC,EAA0B,CAC9BH,MAAO,GACPE,KAAM,MA4BFE,EAAQC,aAzBM,WAA8C,IAA7CN,EAA4C,uDAApCI,EAAcG,EAAsB,uCAC/D,OAAQA,EAAOC,MACb,KAAKZ,EACH,OAAO,2BACFI,GADL,IAEEC,MAAM,YAAKM,EAAOE,WAGtB,KAAKZ,EACH,OAAO,2BACFG,GADL,IAEEG,KAAMI,EAAOE,UAGjB,KAAKX,EACH,OAAO,2BACFE,GADL,IAEEC,MAAOD,EAAMC,MAAMS,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAOL,EAAOE,aAGzD,QACE,OAAOT,MAMEK,I,qCCnDTQ,EAAU,qCAEVC,EAAO,uCAAG,WAAOC,EAAaC,GAApB,eAAAC,EAAA,sEACSC,MAAM,GAAD,OAAIH,GAAJ,OAAUC,IADxB,cACRG,EADQ,yBAGPA,EAASC,QAHF,2CAAH,wD,gCCUAC,EAA4B,SAAC,GAGnC,IAFLpB,EAEI,EAFJA,MACAqB,EACI,EADJA,WAEA,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwCF,mBAAS,OAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KAiCMC,EAvBiB,WACrB,IAAMC,EAAuB5B,EAAMS,QAAO,YAGxC,OAHuD,EAAZoB,MACZC,cAEPC,SAASR,EAAMO,kBAGzC,OAAQL,GACN,IAAK,SACH,OAAOG,EAAqBnB,QAC1B,qBAAGuB,aAGP,IAAK,YACH,OAAOJ,EAAqBnB,QAC1B,qBAAGuB,aAGP,QACE,OAAOJ,GAISK,GAEhBC,EAAWC,cAEXC,EAAU,SAACzB,GACfuB,EF/C4C,CAAE3B,KAAMV,EAAaW,QE+C7CG,KAGtB,OACE,sBAAK0B,UAAU,WAAf,UACE,sBAAKA,UAAU,uBAAf,UACE,wCAIA,kDAIA,gCACE,uBACEA,UAAU,4BACV9B,KAAK,OACL+B,MAAOf,EACPgB,SAvDiB,SAACC,GAC1BhB,EAASgB,EAAMC,OAAOH,YA0DlB,qDAGA,yBACEA,MAAOb,EACPc,SA5DmB,SAACC,GAC1Bd,EAAgBc,EAAMC,OAAOH,QAyDzB,UAIE,yCACA,4CACA,qDAIJ,qBAAKD,UAAU,2BAAf,SACE,oBAAIA,UAAU,iBAAd,SACGV,EAAce,KAAI,gBACjBC,EADiB,EACjBA,OACAhC,EAFiB,EAEjBA,GACAkB,EAHiB,EAGjBA,MACAG,EAJiB,EAIjBA,UAJiB,OAMjB,qBACEK,UAAWO,IACT,iBACA,CAAE,0BAA2BZ,GAC7B,CAAE,6BAA8BA,IAJpC,UAQE,kCACE,uBAAOzB,KAAK,WAAWsC,UAAQ,IAC/B,4BAAIhB,OAGN,sBAAKQ,UAAU,oBAAf,UACE,wBACE9B,KAAK,SACL8B,UAAU,0BACVS,QAAS,kBAAMzB,EAAWsB,IAH5B,wBAKWA,KAGX,wBACEpC,KAAK,SACL8B,UAAU,gCACVS,QAAS,kBAAMV,EAAQzB,IAHzB,8BAhBGA,cC5FNoC,G,MAA+B,SAAC,GAA4B,IAA1BJ,EAAyB,EAAzBA,OAAQtB,EAAiB,EAAjBA,WAC/Ca,EAAWC,cACXjC,EAAO8C,YAAY/C,GAEnBgD,EAAgB,uCAAG,4BAAAjC,EAAA,sEFRYH,EAAQD,EAAD,gBESJ+B,IADf,OACjBO,EADiB,OAGvBhB,EHbwC,CAAE3B,KAAMX,EAAWY,QGazC0C,IAHK,2CAAH,qDAUtB,OAJAC,qBAAU,WACRF,MACC,CAACN,IAGF,mCACGzC,GACC,sBAAKmC,UAAU,cAAf,UACE,oBAAIA,UAAU,qBAAd,SACE,wDACqBnC,EAAKS,QAI5B,oBAAI0B,UAAU,oBAAd,SACGnC,EAAKkD,OAGR,mBAAGf,UAAU,qBAAb,SACGnC,EAAKmD,QAGR,mBAAGhB,UAAU,qBAAb,SACGnC,EAAKoD,QAGR,wBACE/C,KAAK,SACL8B,UAAU,2BACVS,QAAS,kBAAMzB,EAAW,IAH5B,0BCSKkC,G,MA/CO,WACpB,IAAMrB,EAAWC,cACXnC,EAAQgD,YAAYlD,GAEpB0D,EAAkB,uCAAG,4BAAAxC,EAAA,sEHPCH,EAAQD,EAAS,SGOlB,OACnB6C,EADmB,OAGzBvB,EJZ2C,CAAE3B,KAAMZ,EAAYa,QIY5CiD,IAHM,2CAAH,qDAMxBN,qBAAU,WACRK,MACC,IAEH,MAGIlC,mBAAS,GAHb,mBACEoC,EADF,KAEEC,EAFF,KAKMtC,EAAa,SAACsB,GAClBgB,EAAkBhB,IAGpB,OACE,sBAAKN,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACErC,MAAOA,EACPqB,WAAYA,MAKhB,qBAAKgB,UAAU,eAAf,SACE,qBAAKA,UAAU,yBAAf,SACGqB,EACC,cAAC,EAAD,CACEf,OAAQe,EACRrC,WAAYA,IAEZ,4BC7CRuC,EAAO,kBACX,cAAC,IAAD,CAAUxD,MAAOA,EAAjB,SACE,cAAC,EAAD,OAIJyD,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.0815b7e5.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\n\nconst LOAD_TODOS = 'LOAD_TODOS';\nconst LOAD_USER = 'LOAD_USER';\nconst DELETE_TODO = 'DELETE_TODO';\n\nexport const loadTodos = (payload: Todo[]) => ({ type: LOAD_TODOS, payload });\nexport const loadUser = (payload: User) => ({ type: LOAD_USER, payload });\nexport const deleteTodo = (payload: number) => ({ type: DELETE_TODO, payload });\n\nexport const setTodos = (state: RootState) => state.todos;\nexport const setUser = (state: RootState) => state.user;\nexport const removeTodo = (state: RootState) => state.todos;\n\nexport type RootState = {\n  todos: Todo[],\n  user: User | null,\n};\n\nconst initialState: RootState = {\n  todos: [],\n  user: null,\n};\n\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case LOAD_TODOS:\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n\n    case LOAD_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.payload),\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(rootReducer);\n\nexport default store;\n","const API_URL = 'https://mate.academy/students-api/';\n\nconst request = async (url: string, postfix: string) => {\n  const response = await fetch(`${url}${postfix}`);\n\n  return response.json();\n};\n\nexport const getTodos = () => request(API_URL, 'todos');\nexport const getUsers = (id:number) => request(API_URL, `users/${id}`);\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport classnames from 'classnames';\nimport { deleteTodo } from '../../store';\n\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[];\n  selectUser: (id: number) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectUser,\n}) => {\n  const [query, setQuery] = useState('');\n  const [statusOfTodo, setStatusOfTodo] = useState('all');\n\n  const filterTodosByTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  const changeStatusOfTodo = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setStatusOfTodo(event.target.value);\n  };\n\n  const preparingTodos = () => {\n    const todosFilteredByTitle = todos.filter(({ title }) => {\n      const titleInLowerCase = title.toLowerCase();\n\n      return titleInLowerCase.includes(query.toLowerCase());\n    });\n\n    switch (statusOfTodo) {\n      case 'Active':\n        return todosFilteredByTitle.filter(\n          ({ completed }) => !completed,\n        );\n\n      case 'Completed':\n        return todosFilteredByTitle.filter(\n          ({ completed }) => completed,\n        );\n\n      default:\n        return todosFilteredByTitle;\n    }\n  };\n\n  const preparedTodos = preparingTodos();\n\n  const dispatch = useDispatch();\n\n  const delTodo = (id: number) => {\n    dispatch(deleteTodo(id));\n  };\n\n  return (\n    <div className=\"todoList\">\n      <div className=\"todoList__navigation\">\n        <h2>\n          Todos:\n        </h2>\n\n        <h3>\n          Filter by title:\n        </h3>\n\n        <label>\n          <input\n            className=\"todoList__navigationInput\"\n            type=\"text\"\n            value={query}\n            onChange={filterTodosByTitle}\n          />\n        </label>\n\n        <h3>\n          Select todo status:\n        </h3>\n        <select\n          value={statusOfTodo}\n          onChange={changeStatusOfTodo}\n        >\n          <option>All</option>\n          <option>Active</option>\n          <option>Completed</option>\n        </select>\n      </div>\n\n      <div className=\"todoList__list-container\">\n        <ul className=\"todoList__list\">\n          {preparedTodos.map(({\n            userId,\n            id,\n            title,\n            completed,\n          }) => (\n            <li\n              className={classnames(\n                'todoList__item',\n                { 'todoList__item--checked': completed },\n                { 'todoList__item--unchecked': !completed },\n              )}\n              key={id}\n            >\n              <label>\n                <input type=\"checkbox\" readOnly />\n                <p>{title}</p>\n              </label>\n\n              <div className=\"todoList__actions\">\n                <button\n                  type=\"button\"\n                  className=\"todoList__button button\"\n                  onClick={() => selectUser(userId)}\n                >\n                  {`User ${userId}`}\n                </button>\n\n                <button\n                  type=\"button\"\n                  className=\"todoList__deleteButton button\"\n                  onClick={() => delTodo(id)}\n                >\n                  Delete Todo\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loadUser, setUser } from '../../store';\n\nimport { getUsers } from '../../api/api';\n\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number;\n  selectUser: (id: number) => void;\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, selectUser }) => {\n  const dispatch = useDispatch();\n  const user = useSelector(setUser);\n\n  const getUserFromSever = async () => {\n    const userFromServer = await getUsers(userId);\n\n    dispatch(loadUser(userFromServer));\n  };\n\n  useEffect(() => {\n    getUserFromSever();\n  }, [userId]);\n\n  return (\n    <>\n      {user && (\n        <div className=\"currentUser\">\n          <h2 className=\"currentUser__title\">\n            <span>\n              {`Selected user: ${user.id}`}\n            </span>\n          </h2>\n\n          <h3 className=\"currentUser__name\">\n            {user.name}\n          </h3>\n\n          <p className=\"currentUser__email\">\n            {user.email}\n          </p>\n\n          <p className=\"currentUser__phone\">\n            {user.phone}\n          </p>\n\n          <button\n            type=\"button\"\n            className=\"currentUser__clearButton\"\n            onClick={() => selectUser(0)}\n          >\n            Clear\n          </button>\n        </div>\n      )}\n    </>\n  );\n};\n","// import { useSelector } from 'react-redux';\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { loadTodos, setTodos } from './store';\nimport { getTodos } from './api/api';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { CurrentUser } from './components/CurrentUser/CurrentUser';\n\nimport './App.scss';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector(setTodos);\n\n  const getTodosFromServer = async () => {\n    const todosFromServer = await getTodos();\n\n    dispatch(loadTodos(todosFromServer));\n  };\n\n  useEffect(() => {\n    getTodosFromServer();\n  }, []);\n\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  const selectUser = (userId: number) => {\n    setSelectedUserId(userId);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__sidebar\">\n        <TodoList\n          todos={todos}\n          selectUser={selectUser}\n          // selectedUserId={selectedUserId}\n        />\n      </div>\n\n      <div className=\"app__content\">\n        <div className=\"app__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              selectUser={selectUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\nimport App from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}